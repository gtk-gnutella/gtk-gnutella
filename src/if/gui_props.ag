autogen definitions 'props.tpl';

#ifndef USE_TOPLESS

/*
 * $Id$
 */

property_set = "gui_property";
func_prefix  = "gui_prop";
offset       = 1000;
private_src  = "GUI_SOURCES";

uses = "if/ui/gtk/gnet_stats.h";
uses = "if/core/net_stats.h";
uses = "ui/gtk/columns.h";
uses = "ui/gtk/notebooks.h";

prop = {
    name = "monitor_enabled";
    desc = "Search monitor enabled.";
	save = FALSE;
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "monitor_max_items";
    desc = "Maximum number of queries visible in search monitor.";
    type = guint32;
    data = {
        default = 25;
        min     = 0;
        max     = 100;
    };
};

prop = {
    name = "search_hide_downloaded";
    desc = "Whether to hide hits that have been considered "
		"for auto-downloading based on the SHA1 or your filters.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "nodes_col_widths";
    cfgvar = "widths_nodes";
    desc = "Widths of the columns in the nodes table.";
    type = guint32;
    vector_size = NODES_VISIBLE_COLUMNS;
    data = {
        default = "{ 130, 50, 120, 20, 30, 30, 80 }";
    };
};

prop = {
    name = "nodes_col_visible";
    desc = "Which columns are visible in the nodes pane.";
    type = boolean;
    vector_size = NODES_VISIBLE_COLUMNS;
    data = {
        default = "{ 1,1,1,1,1,1,1,1}";
    };
};

prop = {
    name = "file_info_col_widths";
    cfgvar = "widths_file_info";
    desc = "Widths of the columns in the file info table.";
    type = guint32;
    vector_size = FILEINFO_VISIBLE_COLUMNS;
    data = {
        default = "{ 240, 80, 80, 80, 80, 80, 80, 80, 80, 80 }";
    };
};

prop = {
    name = "file_info_col_visible";
    desc = "Visibility of the columns in the file info table.";
    type = boolean;
    vector_size = FILEINFO_VISIBLE_COLUMNS;
    data = {
        default = "{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }";
    };
};

prop = {
    name = "sources_col_widths";
    cfgvar = "widths_sources";
    desc = "Widths of the columns in the sources table.";
    type = guint32;
    vector_size = SOURCES_VISIBLE_COLUMNS;
    data = {
        default = "{ 100, 100, 100, 100, 100, 100 }";
    };
};

prop = {
    name = "search_list_col_widths";
    cfgvar = "widths_search_list";
    desc = "Widths of the columns in the search list on the sidebar.";
    type = guint32;
    vector_size = SEARCH_LIST_VISIBLE_COLUMNS;
    data = {
        default = "{ 80, 20, 20 }";
    };
};

prop = {
    name = "search_results_col_visible";
    desc = "Which columns are visible in the search results tables.";
    type = boolean;
    vector_size = SEARCH_RESULTS_VISIBLE_COLUMNS;
    data = {
        default = "{ 1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0 }";
    };
};

prop = {
    name ="search_results_col_widths";
    cfgvar = "widths_search_results";
    desc = "Widths of the columns in the search results tables.";
    type = guint32;
    vector_size = SEARCH_RESULTS_VISIBLE_COLUMNS;
    data = {
        default = "{"
                  "  210, 30, 50, 80, 30, 120, 90, 40,"
        		  "   40, 40, 40, 40, 40,  40, 40, 40, 40"
                  "}";
    };
};

prop = {
    name = "search_stats_col_widths";
    cfgvar = "widths_search_stats";
    desc = "Widths of the columns in the search stats table.";
    type = guint32;
    vector_size = 3;
    data = {
        default = "{ 200, 80, 80 }";
    };
};

prop = {
    name = "ul_stats_col_widths";
    cfgvar = "widths_ul_stats";
    desc = "Widths of the columns in the upload stats table.";
    type = guint32;
    vector_size = UPLOAD_STATS_GUI_VISIBLE_COLUMNS;
    data = {
        default = "{ 200, 80, 80, 80, 80, 80, 80 }";
    };
};

prop = {
    name = "ul_stats_col_visible";
    desc = "Which columns are visible in the upload stats table.";
    type = boolean;
    vector_size = UPLOAD_STATS_GUI_VISIBLE_COLUMNS;
    data = {
        default = "{ 1, 1, 1, 1, 1, 1, 1 }";
    };
};

prop = {
    name = "uploads_col_widths";
    cfgvar = "widths_uploads";
    desc = "Widths of the columns in the uploads table.";
    type = guint32;
    vector_size = UPLOADS_GUI_VISIBLE_COLUMNS;
    data = {
        default = "{ 200, 120, 36, 80, 80, 80, 80 }";
    };
};

prop = {
    name = "uploads_col_visible";
    desc = "Which columns are visible in the uploads table.";
    type = boolean;
    vector_size = UPLOADS_GUI_VISIBLE_COLUMNS;
    data = {
        default = "{ 1, 1, 1, 1, 1, 1, 1 }";
    };
};

prop = {
    name = "filter_rules_col_widths";
    cfgvar = "widths_filter_table";
    desc = "Widths of the columns in the rules table in the filter dialog.";
    type = guint32;
    vector_size = 4;
    data = {
        default = "{ 10, 240, 80, 40 }";
    };
};

prop = {
    name = "filter_filters_col_widths";
    cfgvar = "widths_filter_filters";
    desc = "Widths of the columns in the filter table in the filter dialog.";
    type = guint32;
    vector_size = 3;
    data = {
        default = "{ 80, 40, 20 }";
    };
};

prop = {
    name = "gnet_stats_msg_col_widths";
    cfgvar = "widths_gnet_stats_msg";
    desc = "Widths of the columns in the Gnet packet stats table.";
    type = guint32;
    vector_size = 8;
    data = {
        default = "{ 120, 60, 60, 60, 60, 60, 60, 20 }";
    };
};

prop = {
    name = "gnet_stats_fc_ttl_col_widths";
    cfgvar = "widths_gnet_stats_fc_ttl";
    desc = "Widths of the columns in the Gnet fc ttl stats table.";
    type = guint32;
    vector_size = 10;
    data = {
        default = "{ 120, 60, 60, 60, 60, 60, 60, 60, 60, 20 }";
    };
};

prop = {
    name = "gnet_stats_fc_hops_col_widths";
    cfgvar = "widths_gnet_stats_fc_hops";
    desc = "Widths of the columns in the Gnet fc hops stats table.";
    type = guint32;
    vector_size = 10;
    data = {
        default = "{ 120, 60, 60, 60, 60, 60, 60, 60, 60, 20 }";
    };
};

prop = {
    name = "gnet_stats_fc_col_widths";
    cfgvar = "widths_gnet_stats_fc";
    desc = "Widths of the columns in the Gnet fc hops stats table.";
    type = guint32;
    vector_size = 10;
    data = {
        default = "{ 120, 60, 60, 60, 60, 60, 60, 60, 60, 20 }";
    };
};

prop = {
    name = "gnet_stats_horizon_col_widths";
    cfgvar = "widths_gnet_stats_horizon";
    desc = "Widths of the columns in the Gnet horizon stats table.";
    type = guint32;
    vector_size = 4;
    data = {
        default = "{ 30, 40, 40, 40 }";
    };
};


prop = {
    name = "gnet_stats_drop_reasons_col_widths";
    cfgvar = "widths_gnet_stats_drop_reasons";
    desc = "Widths of the columns in the Gnet stats drop reasons table.";
    type = guint32;
    vector_size = 2;
    data = {
        default = "{ 240, 55 }";
    };
};

prop = {
    name = "gnet_stats_recv_col_widths";
    cfgvar = "widths_gnet_stats_recv";
    desc = "Widths of the columns in the Gnet stats drop reasons table.";
    type = guint32;
    vector_size = 10;
    data = {
        default = "{ 120, 60, 60, 60, 60, 60, 60, 60, 60, 20 }";
    };
};

prop = {
    name = "hcache_col_widths";
    cfgvar = "widths_hcache";
    desc = "Widths of the columns in the hostcache table.";
    type = guint32;
    vector_size = 4;
    data = {
        default = "{ 60, 40, 40, 40 }";
    };
};


prop = {
    name = "window_coords";
    desc = "Position and size of the main window.";
    type = guint32;
    vector_size = 4;
    data = {
        default = "{ 0, 0, 0, 0 }";
    };
};

prop = {
    name = "filter_dlg_coords";
    desc = "Position and size of the filter dialog.";
    type = guint32;
    vector_size = 4;
    data = {
        default = "{ 0, 0, 0, 0 }";
    };
};

prop = {
    name = "prefs_dlg_coords";
    desc = "Position and size of the preferences dialog.";
    type = guint32;
    vector_size = 4;
    data = {
        default = "{ 0, 0, 0, 0 }";
    };
};

prop = {
    name = "fileinfo_divider_pos";
    desc = "Position of the divider in the fileinfo panel.";
    type = guint32;
    data = {
        default = 305;
        min     = 0x0000;
        max     = 0xFFFF;
    };
};

prop = {
    name = "main_divider_pos";
    desc = "Size of the sidebar.";
    type = guint32;
    data = {
        default = 140;
        min     = 0x0000;
        max     = 0xFFFF;
    };
};

prop = {
    name = "gnet_stats_divider_pos";
    desc = "Position of the divider in the Gnet stats pane.";
    type = guint32;
    data = {
        default = 300;
        min     = 0x0000;
        max     = 0xFFFF;
    };
};

prop = {
    name = "results_divider_pos";
    desc = "Position of the divider in the search results pane.";
    type = guint32;
    data = {
        default = 400;
        min     = 0x0000;
        max     = 0xFFFF;
    };
};

prop = {
    name = "gui_debug";
    desc = "Debug level for the gui.";
    type = guint32;
    data = {
        default = 0;
        min     = 0;
        max     = 20;
    };
};

prop = {
    name = "filter_main_divider_pos";
    desc = "Size of the filter tree in the filter dialog.";
    type = guint32;
    data = {
        default = 140;
        min     = 0x0000;
        max     = 0xFFFF;
    };
};

prop = {
    name = "search_results_show_tabs";
    desc = "Show tabs or search list.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "searchbar_visible";
    desc = "Display Searchbar.";
    type = boolean;
    data = {
        default     = TRUE;
    };
};

prop = {
    name = "sidebar_visible";
    desc = "Display Sidebar.";
    type = boolean;
    data = {
        default     = TRUE;
    };
};

prop = {
    name = "menubar_visible";
    desc = "Display Menu.";
    save = FALSE;
    type = boolean;
    data = {
        default     = TRUE;
    };
};

prop = {
    name = "statusbar_visible";
    desc = "Display statusbar.";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "progressbar_uploads_visible";
    desc = "Display upload statistics in sidebar.";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "progressbar_downloads_visible";
    desc = "Display download statistics in sidebar.";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "progressbar_connections_visible";
    desc = "Display connection statistics in sidebar.";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "progressbar_bws_in_visible";
    desc = "Display incoming HTTP traffic bandwidth usage.";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "progressbar_bws_out_visible";
    desc = "Display outgoing HTTP traffic bandwidth usage.";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "progressbar_bws_gin_visible";
    desc = "Display incoming Gnet traffic bandwidth usage.";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "progressbar_bws_gout_visible";
    desc = "Display outgoing Gnet traffic bandwidth usage.";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "progressbar_bws_glin_visible";
    desc = "Display incoming Gnet leaf traffic bandwidth usage.";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "progressbar_bws_glout_visible";
    desc = "Display outgoing Gnet leaf traffic bandwidth usage.";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "autohide_bws_gleaf";
    desc = "Automatically hide leaf bandwidth display when not in "
           "ultrapeer mode.";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "progressbar_bws_in_avg";
    desc = "Display incoming HTTP traffic bandwidth average.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "progressbar_bws_out_avg";
    desc = "Display outgoing HTTP traffic bandwidth average.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "progressbar_bws_gin_avg";
    desc = "Display incoming Gnet traffic bandwidth average.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "progressbar_bws_gout_avg";
    desc = "Display outgoing Gnet traffic bandwidth average.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "progressbar_bws_glin_avg";
    desc = "Display incoming Gnet leaf traffic bandwidth average.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "progressbar_bws_glout_avg";
    desc = "Display outgoing Gnet leaf traffic bandwidth average.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "search_sort_casesense";
    desc = "Do a case sensitive sorting.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "search_sort_default_order";
    desc = "Default sort order for search results.";
    type = guint32;
    data = {
        default = 0;
    };
};

prop = {
    name = "search_sort_default_column";
    desc = "Default sort column for search results.";
    type = guint32;
    data = {
        default = -1;
    };
};

prop = {
    name = "search_discard_spam";
    desc = "Discard search results which are considered spam.";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "search_discard_hashless";
    desc = "Discard search results which carry no hashsum.";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "search_jump_to_created";
    desc = "Jump to newly created searches";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "search_stats_mode";
    desc = "Collect statistics about searches that go through this node.";
    type = multichoice;
    data = {
        default = 0;
    };
    choice = {
        name = "disable";
        value = 0;
    };
    choice = {
        name = "by words";
        value = 1;
    };
    choice = {
        name = "by whole query";
        value = 2;
    };
    choice = {
        name = "by router";
        value = 3;
    };
};

prop = {
    name = "search_stats_update_interval";
    desc = "Interval in which the search stats are updated.";
    type = guint32;
    data = {
        default = 200;
        min     = 0;
        max     = 50000;
    };
};

prop = {
    name = "search_stats_delcoef";
    desc =	"A deletion coefficient, so that small non-significant results "
			"can be dropped.  The lower it is, the more search statistics "
			"will be kept in memory.";
    type = guint32;
    data = {
        default = 25;
        min     = 0;
        max     = 100;
    };
};

prop = {
    name = "confirm_quit";
    desc = "Show confirmation dialog when leaving gtk-gnutella.";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "show_tooltips";
    desc = "Show a helpful message when the mouse pointer lingers "
           "over a widget.";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "expert_mode";
    desc = "Show a lot more settings to tweak. If you tamper with them be "
           "sure to read up on what they are doing.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "gnet_stats_perc";
    desc = "Show percentages instead of absolute values in the Gnet stats.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "gnet_stats_bytes";
    desc = "Show bytes instead of packets in the Gnet stats.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "gnet_stats_hops";
    desc = "Show stats per hops instead of per TTL.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "gnet_stats_source";
    desc = "Choose source of stats to be displayed.";
    type = multichoice;
    data = {
        default = 0;
    };
	choice = {
		name = "TCP & UDP";
		value = GNET_STATS_FULL;
	};
	choice = {
		name = "TCP only";
		value = GNET_STATS_TCP_ONLY;
	};
	choice = {
		name = "UDP only";
		value = GNET_STATS_UDP_ONLY;
	};
};

prop = {
    name = "gnet_stats_drop_reasons_type";
    desc = "Choose message type for drop reasons.";
    type = multichoice;
    data = {
        default = MSG_TOTAL;
    };
	choice = {
		name = "Unknown";
		value = MSG_UNKNOWN;
	};
	choice = {
		name = "Ping";
		value = MSG_INIT;
	};
	choice = {
		name = "Pong";
		value = MSG_INIT_RESPONSE;
	};
	choice = {
		name = "Bye";
		value = MSG_BYE;
	};
	choice = {
		name = "DHT";
		value = MSG_DHT;
	};
	choice = {
		name = "QRP";
		value = MSG_QRP;
	};
	choice = {
		name = "HSEP";
		value = MSG_HSEP;
	};
	choice = {
		name = "RUDP";
		value = MSG_RUDP;
	};
	choice = {
		name = "Vendor spec.";
		value = MSG_VENDOR;
	};
	choice = {
		name = "Vendor std.";
		value = MSG_STANDARD;
	};
	choice = {
		name = "Push";
		value = MSG_PUSH_REQUEST;
	};
	choice = {
		name = "Query";
		value = MSG_SEARCH;
	};
	choice = {
		name = "Query Hit";
		value = MSG_SEARCH_RESULTS;
	};
	choice = {
		name = "DHT Ping";
		value = MSG_DHT_PING;
	};
	choice = {
		name = "DHT Pong";
		value = MSG_DHT_PONG;
	};
	choice = {
		name = "DHT Store";
		value = MSG_DHT_STORE;
	};
	choice = {
		name = "DHT Store Ack";
		value = MSG_DHT_STORE_ACK;
	};
	choice = {
		name = "DHT Find Node";
		value = MSG_DHT_FIND_NODE;
	};
	choice = {
		name = "DHT Found Node";
		value = MSG_DHT_FOUND_NODE;
	};
	choice = {
		name = "DHT Find Value";
		value = MSG_DHT_FIND_VALUE;
	};
	choice = {
		name = "DHT Value";
		value = MSG_DHT_VALUE;
	};
	choice = {
		name = "Total";
		value = MSG_TOTAL;
	};
};


prop = {
    name = "gnet_stats_with_headers";
    desc = "Include Gnutella packet header size to the volume.";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "gnet_stats_drop_perc";
    desc = "Show percentages instead of absolute values in the Gnet stats "
           "(drop reasons).";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "gnet_stats_general_col_widths";
    cfgvar = "widths_gnet_stats_general";
    desc = "Widths of the columns in the Gnet stats general table.";
    type = guint32;
    vector_size = 2;
    data = {
        default = "{ 240, 55 }";
    };
};

prop = {
    name = "autoclear_completed_uploads";
    cfgvar = "auto_clear_completed_uploads";
    desc = "Auto clear completed uploads.";
    type = boolean;
    data = {
        default = TRUE;
        value   = clear_uploads_complete;
    };
};

prop = {
    name = "autoclear_failed_uploads";
    cfgvar = "auto_clear_failed_uploads";
    desc = "Auto clear failed uploads.";
    type = boolean;
    data = {
        default = TRUE;
        value   = clear_uploads_failed;
    };
};

prop = {
    name = "node_show_uptime";
    desc = "Whether the node's uptime should be shown (not all nodes provide "
		"this information).";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "node_show_handshake_version";
    desc = "Whether the handshaking version number should be displayed.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "node_show_detailed_info";
    desc = "Whether detailed traffic information should be shown for "
		"the node.  When enabled, it is possible to also customize "
		"how much information to display.  When disabled, only TX and RX "
		"message counts are displayed, followed by the message queue info.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_txc";
    desc = "Whether TX traffic compression ratio should be displayed.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_rxc";
    desc = "Whether RX traffic compression ratio should be displayed.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_tx_wire";
    desc = "Whether to display the amount of bytes sent on the TX wire.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_rx_wire";
    desc = "Whether to display the amount of bytes received on the RX wire.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_tx_speed";
    desc = "Whether TX instantaneous transmission speed should be displayed.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_rx_speed";
    desc = "Whether RX instantaneous transmission speed should be displayed.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_tx_queries";
    desc = "Whether count of transmitted queries should be displayed.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_rx_queries";
    desc = "Whether count of received queries should be displayed.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_tx_hits";
    desc = "Whether count of transmitted query hits should be displayed.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_rx_hits";
    desc = "Whether count of received query hits should be displayed.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_gen_queries";
    desc = "Whether count of locally generated queries should be displayed.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_sq_queries";
    desc = "Whether count of local queries pending transmission should "
		"be displayed.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_tx_dropped";
    desc = "Whether count of dropped messages on TX should be displayed.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_rx_dropped";
    desc = "Whether count of dropped messages on RX should be displayed.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_qrp_stats";
    desc = "Whether Query Routing Protocol statistics should be displayed. "
		"For a leaf node, this is simply the ratio of queries that generated "
		"a hit over the amount of received queries.  For an ultrapeer, it "
		"displays the amount of slots in the QRP table, 'g' the generation "
		"number, 'f' the fill ratio, 't' the passing threshold and 'e' the "
		"efficiency, i.e. the proportion of received queries that are sent "
		"to the node after QRP table filtering.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_dbw";
    desc = "Whether we should display message counts for duplicate, bad, "
		"weird and messages bearing an hostile IP address.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_rt";
    desc = "Whether ping/pong roundtrip times (average and last) should be "
		"displayed.  Values shown are in milliseconds.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_shared_size";
    desc = "Whether we should display the size of the node's library, when "
		"it is known to us.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "show_gnet_info_shared_files";
    desc = "Whether we should display the amount of files shared by nodes, "
		"when that is known to us.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "search_accumulation_period";
    desc = "The amount of time in seconds that the GUI should buffer "
		"search results as they come in.  This prevents too frequent "
		"updates that may cause flickering, but also saves CPU cycles "
		"since less redrawing has to occur in the search pane.";
    type = guint32;
    data = {
        default = 5;
		min = 1;
		max = 30;
    };
};

/*
 * GTK2 specific properties
 */

prop = {
    name = "treemenu_nodes_expanded";
    desc = "Expanded stati of the nodes in the treemenu.";
    type = guint32;
    vector_size = nb_main_page_num;
    data = {
        default = "{ 1, 1, 1, 1, 1, 1, 1, 1,  }";
    };
};

prop = {
    name = "gnet_stats_pkg_col_widths";
    cfgvar = "widths_gnet_stats_pkg";
    desc = "Widths of the columns in the Gnet packet stats table (pkg). "
           "[GTK2]";
    type = guint32;
    vector_size = 6;
    data = {
        default = "{ 60, 20, 20, 20, 20, 20 }";
    };
};

prop = {
    name = "gnet_stats_byte_col_widths";
    cfgvar = "widths_gnet_stats_byte";
    desc = "Widths of the columns in the Gnet packet stats table (byte). [GTK2]";
    type = guint32;
    vector_size = 6;
    data = {
        default = "{ 60, 20, 20, 20, 20, 20 }";
    };
};

prop = {
    name = "config_toolbar_style";
    desc = "Configures the appearance of the toolbar.";
    type = multichoice;
    data = {
        default = 4;
    };
    choice = {
        name = "Icons";
        value = 1;
    };
    choice = {
        name = "Text";
        value = 2;
    };
    choice = {
        name = "Both (vertical)";
        value = 3;
    };
    choice = {
        name = "Both (horizontal)";
        value = 4;
    };
};

prop = {
    name = "search_lifetime";
    desc = "The lifetime of a search. If this time is exceeded, "
	"the search is stopped.";
    type = multichoice;
    save = FALSE;
    data = {
        default = 0;
    };
    choice = {
        name = "This session";
        value = 0;
    };
    choice = {
        name = "1 hour";
        value = 1;
    };
    choice = {
        name = "4 hours";
        value = 4;
    };
    choice = {
        name = "1 day";
        value = 24;
    };
    choice = {
        name = "4 days";
        value = 96;
    };
    choice = {
        name = "1 week";
        value = 168;
    };
    choice = {
        name = "2 weeks";
        value = 336;
    };
};

prop = {
    name = "status_icon_enabled";
    desc = "Show a status icon in the system tray if possible "
			"(requires Gtk+ 2.10 or newer).";
	save = TRUE;
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "autohide_bws_dht";
    desc = "Automatically hide DHT bandwidth display when DHT not enabled.";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "progressbar_bws_dht_in_visible";
    desc = "Display incoming DHT traffic bandwidth usage.";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "progressbar_bws_dht_out_visible";
    desc = "Display outgoing DHT traffic bandwidth usage.";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "progressbar_bws_dht_in_avg";
    desc = "Display incoming DHT traffic bandwidth as an average.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "progressbar_bws_dht_out_avg";
    desc = "Display outgoing DHT traffic bandwidth as an average.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
	name = "search_media_type_audio";
	desc = "Remote nodes supporting media type filtering will apply your "
		"query specifically on their audio files.";
	type = boolean;
	data = {
		default = FALSE;
	};
};

prop = {
	name = "search_media_type_video";
	desc = "Remote nodes supporting media type filtering will apply your "
		"query specifically on their video files.";
	type = boolean;
	data = {
		default = FALSE;
	};
};

prop = {
	name = "search_media_type_document";
	desc = "Remote nodes supporting media type filtering will apply your "
		"query specifically on their document files. "
		"Document files are XML, HTML, Word, PDF, etc...";
	type = boolean;
	data = {
		default = FALSE;
	};
};

prop = {
	name = "search_media_type_image";
	desc = "Remote nodes supporting media type filtering will apply your "
		"query specifically on their image files.";
	type = boolean;
	data = {
		default = FALSE;
	};
};

prop = {
	name = "search_media_type_archive";
	desc = "Remote nodes supporting media type filtering will apply your "
		"query specifically on archive / program files such as "
		"ZIP, 7z, tar, bz2, gz, deb, rpm and also exe files.";
	type = boolean;
	data = {
		default = FALSE;
	};
};

prop = {
    name = "search_discard_alien_ip";
    desc = "Discard search results with an alien IP address, not matching "
		"the one from which the results come from.";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "search_restart_when_pending";
    desc = "Whether session-only searches which happen to have pending "
		"downloads should be restarted when gtk-gnutella is launched.";
    type = boolean;
    data = {
        default = FALSE;
    };
};

prop = {
    name = "search_discard_banned_guid";
    desc = "Discard search results coming from servents with a banned GUID.";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "search_display_guess_stats";
    desc = "Whether a summary line with GUESS search stats "
		"should be displayed.";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "guess_stats_show_total";
    desc = "Whether the GUESS summary line should show total statistics or "
		"ones pertaining to the current search only.";
    type = boolean;
    data = {
        default = TRUE;
    };
};

prop = {
    name = "fileinfo_notebook_tab";
    desc = "Notebook tab number for the fileinfo listing";
    type = guint32;
    data = {
        default = 0;
    };
};

prop = {
    name = "main_notebook_tab";
    desc = "Notebook tab number for the main page";
    type = guint32;
    data = {
        default = 0;
    };
};

prop = {
    name = "gnet_stats_notebook_tab";
    desc = "Notebook tab number for the Gnet stats page";
    type = guint32;
    data = {
        default = 0;
    };
};

prop = {
    name = "downloads_info_notebook_tab";
    desc = "Notebook tab number for download info / tools";
    type = guint32;
    data = {
        default = 0;
    };
};

#endif /* !USE_TOPLESS */

/* vi: set ts=4: */
