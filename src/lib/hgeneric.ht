/*
 * Copyright (c) 2012, Raphael Manfredi
 *
 *----------------------------------------------------------------------
 * This file is part of gtk-gnutella.
 *
 *  gtk-gnutella is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  gtk-gnutella is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with gtk-gnutella; if not, write to the Free Software
 *  Foundation, Inc.:
 *      51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 *----------------------------------------------------------------------
 */

/**
 * @ingroup lib
 * @file
 *
 * Hash <generic>s.
 *
 * @author Raphael Manfredi
 * @date 2012
 */

#ifndef _h<generic>_h_
#define _h<generic>_h_

#include "hash.h"

struct h<generic>;
typedef struct h<generic> h<generic>_t;

struct h<generic>_iter;
typedef struct h<generic>_iter h<generic>_iter_t;

/**
 * Cast <generic> to a polmorphic hash const.
 */
static inline ALWAYS_INLINE const struct hash *
h<generic>_cast_to_const_hash(const struct h<generic> *hx)
{
	return (const struct hash *) hx;
}

/**
 * Cast <generic> to a polmorphic hash.
 */
static inline ALWAYS_INLINE struct hash *
h<generic>_cast_to_hash(const struct h<generic> *hx)
{
	return (struct hash *) hx;
}

/**
 * Cast pointer to <generic> to a pointer to a polmorphic hash.
 */
static inline ALWAYS_INLINE struct hash **
h<generic>_ptr_cast_to_hash(struct h<generic> * const *hx)
{
	return (struct hash **) hx;
}

/*
 * Public interface.
 */

h<generic>_t *h<generic>_create(enum hash_key_type ktype, size_t keysize);
h<generic>_t *h<generic>_create_real(enum hash_key_type ktype, size_t keysize);
h<generic>_t *h<generic>_create_any(hash_fn_t primary,
	hash_fn_t secondary, eq_fn_t eq);
h<generic>_t *h<generic>_create_any_real(hash_fn_t primary,
	hash_fn_t secondary, eq_fn_t eq);
void h<generic>_free_null(h<generic>_t **);
void h<generic>_clear(h<generic>_t *);
void h<generic>_thread_safe(h<generic>_t *);
void h<generic>_lock(h<generic>_t *);
void h<generic>_unlock(h<generic>_t *);

bool h<generic>_contains(const h<generic>_t *, const void *key);
const void *h<generic>_random(const h<generic>_t *);
@if TABLE
void htable_insert(htable_t *, const void *key, void *value);
void *htable_lookup(const htable_t *, const void *key);
bool htable_lookup_extended(const htable_t *, const void *key,
	const void **keyptr, void **valptr);
bool htable_random_extended(const htable_t *,
	const void **keyptr, void **valptr);

static inline void
htable_insert_const(htable_t *ht, const void *key, const void *value)
{
	htable_insert(ht, key, deconstify_gpointer(value));
}

@end
@if SET
void hset_insert(hset_t *, const void *key);
void *hset_lookup(const hset_t *, const void *key);
bool hset_contains_extended(const hset_t *, const void *key,
	const void **keyptr);
bool hset_random_extended(const hset_t *, const void **keyptr);
@end
bool h<generic>_remove(h<generic>_t *, const void *key);
size_t h<generic>_count(const h<generic>_t *);
void h<generic>_foreach(const h<generic>_t *, <iterator>_fn_t fn, void *data);
size_t h<generic>_foreach_remove(h<generic>_t *, <iterator>_rm_fn_t, void *);
@if TABLE
void htable_foreach_key(const htable_t *, data_fn_t fn, void *data);
@end

h<generic>_iter_t *h<generic>_iter_new(const h<generic>_t *);
void h<generic>_iter_release(h<generic>_iter_t **);
@if TABLE
bool htable_iter_next(htable_iter_t *, const void **kp, void **vp);
@end
@if SET
bool hset_iter_next(hset_iter_t *, const void **kp);
@end
void h<generic>_iter_remove(h<generic>_iter_t *);

@if TABLE
void htable_test(void);
@end

#endif /* _h<generic>_h_ */

/* vi: set ts=4 sw=4 syn=c cindent: */
