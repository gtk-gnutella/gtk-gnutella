;#
;# $Id$
;#
;# Copyright (c) 2006, Christian Biere
;#
;#----------------------------------------------------------------------
;# This file is part of gtk-gnutella.
;#
;#  gtk-gnutella is free software; you can redistribute it and/or modify
;#  it under the terms of the GNU General Public License as published by
;#  the Free Software Foundation; either version 2 of the License, or
;#  (at your option) any later version.
;#
;#  gtk-gnutella is distributed in the hope that it will be useful,
;#  but WITHOUT ANY WARRANTY; without even the implied warranty of
;#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;#  GNU General Public License for more details.
;#
;#  You should have received a copy of the GNU General Public License
;#  along with gtk-gnutella; if not, write to the Free Software
;#  Foundation, Inc.:
;#      51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
;#----------------------------------------------------------------------
;#
;# This file is a the header of the generated bit_array.h file.
;#
/**
 * @ingroup lib
 * @file
 *
 * Bit arrays. 
 *
 * @author Christian Biere
 * @author Raphael Manfredi
 * @date 2006
 */

#ifndef _bit_array_h_
#define _bit_array_h_

#include "common.h"

#include "pow2.h"

/*
 * Functions for handling arrays of bits. On BSD systems, the macros from
 * <bitstring.h> could be used for better efficiency.
 * The following implementation tries to eliminate loop overhead by handling
 * all bits of a "long" at once, where possible.
 */

typedef unsigned long bit_array_t;

#if LONG_MAX == 0x7fffffffL
#define BIT_ARRAY_SETCOUNT(w)	bits_set32(w)
#if CHAR_BIT == 8
#define BIT_ARRAY_BITSHIFT	(2 + 3)
#elif CHAR_BIT == 16
#define BIT_ARRAY_BITSHIFT	(2 + 4)
#else
#error "Unsupported size of char"
#endif	/* CHAR_BIT */
#elif (ULONG_MAX >> 31) > 0xffffffffUL
#define BIT_ARRAY_SETCOUNT(w)	bits_set64(w)
#if CHAR_BIT == 8
#define BIT_ARRAY_BITSHIFT	(3 + 3)
#elif CHAR_BIT == 16
#define BIT_ARRAY_BITSHIFT	(3 + 4)
#else
#error "Unsupported size of char"
#endif	/* CHAR_BIT */
#endif	/* LONG_MAX */

#define BIT_ARRAY_BITSIZE		(CHAR_BIT * sizeof(bit_array_t))
#define BIT_ARRAY_BITMASK		(BIT_ARRAY_BITSIZE - 1)
#define BIT_ARRAY_IDX(i)		((i) >> BIT_ARRAY_BITSHIFT)
#define BIT_ARRAY_WORD(base, i)	base[BIT_ARRAY_IDX(i)]
#define BIT_ARRAY_BIT(i)		(1UL << ((i) & BIT_ARRAY_BITMASK))

;# vi: set ts=4 sw=4 syn=c cindent:
