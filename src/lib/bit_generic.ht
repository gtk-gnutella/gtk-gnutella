;#
;# $Id$
;#
;# Copyright (c) 2006, Christian Biere & Raphael Manfredi
;#
;#----------------------------------------------------------------------
;# This file is part of gtk-gnutella.
;#
;#  gtk-gnutella is free software; you can redistribute it and/or modify
;#  it under the terms of the GNU General Public License as published by
;#  the Free Software Foundation; either version 2 of the License, or
;#  (at your option) any later version.
;#
;#  gtk-gnutella is distributed in the hope that it will be useful,
;#  but WITHOUT ANY WARRANTY; without even the implied warranty of
;#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;#  GNU General Public License for more details.
;#
;#  You should have received a copy of the GNU General Public License
;#  along with gtk-gnutella; if not, write to the Free Software
;#  Foundation, Inc.:
;#      51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
;#----------------------------------------------------------------------
;#
;# This file is the template used to generate bit_array.h and bit_field.h.
;#

/**
 * Use the macro BIT_GENERIC_SIZE for allocating a properly sized bit <generic>
 * for "n" bits. Example:
 *
 * static bit_generic_t bits[BIT_GENERIC_SIZE(100)];
 */
#define BIT_GENERIC_SIZE(n) \
	((n) / BIT_GENERIC_BITSIZE + ((n) % BIT_GENERIC_BITSIZE ? 1 : 0))

/**
 * Use the macro BIT_GENERIC_BYTE_SIZE for dynamic allocation.
 * Example:
 *
 *  bit_generic_t *bits = malloc(BIT_GENERIC_BYTE_SIZE(num_bits));
 *
 **/
 #define BIT_GENERIC_BYTE_SIZE(n) (BIT_GENERIC_SIZE(n) * sizeof (bit_generic_t))

/**
 * Initializes the bit <generic> so that all bits are cleared. This
 * function MUST be used for all non-statically allocated bit arrays
 * before using it with any other bit <generic> function!
 *
 * @param base The base address of the bit <generic>, may be NULL.
 * @param n The number of bits the bit <generic> holds.
 */
static inline void 
bit_generic_init(bit_generic_t *base, size_t n)
{
	g_assert(!n || NULL != base);
	if (n) {
		memset(base, 0, BIT_GENERIC_BYTE_SIZE(n));
	}
}

/**
 * Sets bit number "i" of the bit <generic> "base".
 *
 * @param base The base address of the bit <generic> which must be initialized.
 * @param n The index of the bit to set counting from zero.
 * @note: For optimum performance, there are no checks at all.
 */
static inline ALWAYS_INLINE void
bit_generic_set(bit_generic_t *base, size_t i)
{
	BIT_GENERIC_WORD(base, i) |= BIT_GENERIC_BIT(i);
}

/**
 * Sets bit number "i" of the bit <generic> "base".
 * @param base The base address of the bit <generic> which must be initialized.
 * @param n The index of the bit to clear counting from zero.
 * @note: For optimum performance, there are no checks at all.
 */
static inline ALWAYS_INLINE void 
bit_generic_clear(bit_generic_t *base, size_t i)
{
	BIT_GENERIC_WORD(base, i) &= ~BIT_GENERIC_BIT(i);
}

/**
 * Flips bit number "i" of the bit <generic> "base".
 * @note: For optimum performance, there are no checks at all.
 *
 * @param base The base address of the bit <generic> which must be initialized.
 * @param n The index of the bit to flip counting from zero.
 * @return The new state of the bit.
 */
static inline ALWAYS_INLINE bool
bit_generic_flip(bit_generic_t *base, size_t i)
{
	return BIT_GENERIC_WORD(base, i) ^= BIT_GENERIC_BIT(i);
}

/**
 * Retrieves bit number "i" of the bit <generic> "base".
 * @note: For optimum performance, there are no checks at all.
 * @param base The base address of the bit <generic> which must be initialized.
 * @param n The index of the bit to read counting from zero.
 * @return TRUE if the bit is set, FALSE otherwise.
 */
static inline ALWAYS_INLINE bool
bit_generic_get(const bit_generic_t *base, size_t i)
{
	return 0 != (BIT_GENERIC_WORD(base, i) & BIT_GENERIC_BIT(i));
}

void bit_generic_resize(bit_generic_t **base_ptr, size_t old_n, size_t new_n);
void bit_generic_clear_range(bit_generic_t *base, size_t from, size_t to);
void bit_generic_set_range(bit_generic_t *base, size_t from, size_t to);
size_t bit_generic_first_clear(const bit_generic_t *base, size_t from, size_t to);
size_t bit_generic_first_set(const bit_generic_t *base, size_t from, size_t to);
size_t bit_generic_last_set(const bit_generic_t *base, size_t from, size_t to);
size_t bit_generic_count_set(const bit_generic_t *base, size_t from, size_t to);

#endif /* _bit_generic_h_ */

/* vi: set ts=4 sw=4 syn=c cindent: */
